// <auto-generated />
using System;
using CargoDesk.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CargoDesk.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactPersonFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_person_first_name");

                    b.Property<string>("ContactPersonLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_person_last_name");

                    b.Property<string>("ContactPersonPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_person_phone_number");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.CargoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeliveryAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("delivery_address_id");

                    b.Property<DateTime>("DeliveryDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date_time");

                    b.Property<int>("NumberOfPallets")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_pallets");

                    b.Property<Guid>("PickUpAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("pick_up_address_id");

                    b.Property<DateTime>("PickUpDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pick_up_date_time");

                    b.Property<DateTime>("PlannedDeliveryDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("planned_delivery_date_time");

                    b.Property<DateTime>("PlannedPickUpDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("planned_pick_up_date_time");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_cargos");

                    b.HasIndex("DeliveryAddressId")
                        .HasDatabaseName("ix_cargos_delivery_address_id");

                    b.HasIndex("PickUpAddressId")
                        .HasDatabaseName("ix_cargos_pick_up_address_id");

                    b.HasIndex("ReferenceNumber")
                        .HasDatabaseName("ix_cargos_reference_number");

                    b.ToTable("cargos", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.DriverEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_drivers");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.RouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CargoIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cargo_ids");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_routes");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_routes_driver_id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.DelayRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DelayTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("delay_time");

                    b.Property<Guid>("DispatcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("dispatcher_id");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.HasKey("Id")
                        .HasName("pk_delay_requests");

                    b.ToTable("delay_requests", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.DriverChatMappingEntity", b =>
                {
                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<string>("DriverPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("driver_phone");

                    b.HasKey("DriverId")
                        .HasName("pk_drivers_chats");

                    b.ToTable("drivers_chats", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.DriverWorkSessionEntity", b =>
                {
                    b.Property<Guid>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<DateTime?>("WorkEndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("work_end_at");

                    b.Property<DateTime?>("WorkStartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("work_start_at");

                    b.HasKey("DriverId")
                        .HasName("pk_driver_work_session");

                    b.ToTable("driver_work_session", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DispatcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("dispatcher_id");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("issue_type");

                    b.HasKey("Id")
                        .HasName("pk_issues");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_issues_chat_id");

                    b.HasIndex("DispatcherId")
                        .HasDatabaseName("ix_issues_dispatcher_id");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueProofEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("message_type");

                    b.HasKey("Id")
                        .HasName("pk_issue_proofs");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("ix_issue_proofs_issue_id");

                    b.ToTable("issue_proofs", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.RouteCargoStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CargoId")
                        .HasColumnType("uuid")
                        .HasColumnName("cargo_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_route_cargo_statuses");

                    b.HasIndex("RouteId", "CargoId")
                        .IsUnique()
                        .HasDatabaseName("ix_route_cargo_statuses_route_id_cargo_id");

                    b.ToTable("route_cargo_statuses", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.CargoEntity", b =>
                {
                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", null)
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cargos_address_delivery_address_id");

                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", null)
                        .WithMany()
                        .HasForeignKey("PickUpAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cargos_address_pick_up_address_id");
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.RouteEntity", b =>
                {
                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.DriverEntity", null)
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routes_drivers_driver_id");
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueProofEntity", b =>
                {
                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueEntity", "Issue")
                        .WithMany("Proofs")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_proofs_issues_issue_id");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueEntity", b =>
                {
                    b.Navigation("Proofs");
                });
#pragma warning restore 612, 618
        }
    }
}
