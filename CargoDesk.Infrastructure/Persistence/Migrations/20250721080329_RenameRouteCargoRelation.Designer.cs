// <auto-generated />
using System;
using CargoDesk.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CargoDesk.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250721080329_RenameRouteCargoRelation")]
    partial class RenameRouteCargoRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactPersonFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_person_first_name");

                    b.Property<string>("ContactPersonLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_person_last_name");

                    b.Property<string>("ContactPersonPhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("contact_person_phone_number");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.CargoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeliveryAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("delivery_address_id");

                    b.Property<DateTime>("DeliveryDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date_time");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<Guid>("PickUpAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("pick_up_address_id");

                    b.Property<DateTime>("PickUpDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pick_up_date_time");

                    b.Property<DateTime>("PlannedDeliveryDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("planned_delivery_date_time");

                    b.Property<DateTime>("PlannedPickUpDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("planned_pick_up_date_time");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference_number");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cargos");

                    b.HasIndex("DeliveryAddressId")
                        .HasDatabaseName("ix_cargos_delivery_address_id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_cargos_driver_id");

                    b.HasIndex("PickUpAddressId")
                        .HasDatabaseName("ix_cargos_pick_up_address_id");

                    b.HasIndex("ReferenceNumber")
                        .HasDatabaseName("ix_cargos_reference_number");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_cargos_route_id");

                    b.ToTable("cargos", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.DriverEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_drivers");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.RouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<int>("RouteStatus")
                        .HasColumnType("integer")
                        .HasColumnName("route_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_routes");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_routes_driver_id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.CargoEntity", b =>
                {
                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", "DeliveryAddressEntity")
                        .WithMany("CargoDeliveries")
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cargos_address_delivery_address_id");

                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.DriverEntity", "DriverEntity")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cargos_drivers_driver_id");

                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", "PickUpAddressEntity")
                        .WithMany("CargoPickUps")
                        .HasForeignKey("PickUpAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cargos_address_pick_up_address_id");

                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.RouteEntity", "RouteEntity")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cargos_routes_route_id");

                    b.Navigation("DeliveryAddressEntity");

                    b.Navigation("DriverEntity");

                    b.Navigation("PickUpAddressEntity");

                    b.Navigation("RouteEntity");
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.RouteEntity", b =>
                {
                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.DriverEntity", "DriverEntity")
                        .WithMany("Routes")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routes_drivers_driver_id");

                    b.Navigation("DriverEntity");
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", b =>
                {
                    b.Navigation("CargoDeliveries");

                    b.Navigation("CargoPickUps");
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.DriverEntity", b =>
                {
                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
