// <auto-generated />
using System;
using CargoDesk.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CargoDesk.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250723083645_DelayTableCreation")]
    partial class DelayTableCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactPersonLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactPersonPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.CargoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeliveryAddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfPallets")
                        .HasColumnType("integer");

                    b.Property<Guid>("PickUpAddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PickUpDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PlannedDeliveryDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PlannedPickUpDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("PickUpAddressId");

                    b.HasIndex("ReferenceNumber");

                    b.ToTable("cargos", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.DriverEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.RouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CargoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<int>("RouteStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CargoId")
                        .IsUnique();

                    b.HasIndex("DriverId");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.DelayRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DelayTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("DispatcherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("delay_requests", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.DriverChatMappingEntity", b =>
                {
                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("DriverPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DriverId");

                    b.ToTable("drivers_chats", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DispatcherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("DispatcherId");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueProofEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("issue_proofs", (string)null);
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.CargoEntity", b =>
                {
                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", null)
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.AddressEntity", null)
                        .WithMany()
                        .HasForeignKey("PickUpAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.RouteEntity", b =>
                {
                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.CargoEntity", null)
                        .WithOne()
                        .HasForeignKey("CargoDesk.Infrastructure.Persistence.Entities.RouteEntity", "CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.DriverEntity", null)
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueProofEntity", b =>
                {
                    b.HasOne("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueEntity", "Issue")
                        .WithMany("Proofs")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("CargoDesk.Infrastructure.Persistence.Entities.Telegram.IssueEntity", b =>
                {
                    b.Navigation("Proofs");
                });
#pragma warning restore 612, 618
        }
    }
}
